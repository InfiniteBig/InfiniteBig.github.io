{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/07/14/hello-world/"},{"title":"Pull Request","text":"什么是Pull Request 首先我们先来理解什么是Pull Request。Pull Request是自己修改源代码后，请求对方仓库采纳该修改时采取的一种行为。 Pull Request 的流程现在以一个具体的例子说明。现在假设我们在使用GitHub上的一款开源软件。 在使用这款软件的过程中，我们偶然发现了BUG。为了继续实用软件，我们手动修复了这个BUG。如果我们修改的这段代码能被该软件的开发仓库采纳，今后与我们同样使用这款软件的人就不会再遇到这个BUG。为此，我们要第一之间发送Pull Request。 在GitHub上发送Pull Request后，接收方的仓库会创建一个附带源代码的Issue，我们在这个Issue中记录详细的内容。这就是Pull Request。 发送过去的Pull Request是否被采纳，要由接收方仓库的管理者进行判断。一般只要代码没有问题，对方都会采纳。如果有问题，我们会收到评论。 只要PullRequest被顺利采纳，我们就会成为这个项目的Contributor，我们编写的这段代码将会被全世界的人使用。这正是社会化编程和开园开发的一大乐趣。 发送Pull Request 前的准备 查看要修正的源代码 Fork clone branch 为何要在特性分支中进行作业 确认分支 创建特性分支 添加代码 提交修改 创建远程分支 发送Pull Request让Pull Request更加有效的方法 明确标出“正在开发过程中” 不进行Fork直接从分支发送Pull Request 仓库的维护 仓库的Fork与clone 给原仓库设置名称 获取最新数据","link":"/2021/07/15/Pull-Request/"}],"tags":[],"categories":[]}